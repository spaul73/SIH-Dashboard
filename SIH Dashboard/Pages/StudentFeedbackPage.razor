@page "/studentfeedback"
@inject NavigationManager NavManager
@inject IJSRuntime Runtime

<NavBar/>

@if (GlobalUser.UID == null)
{
    NavManager.NavigateTo("/signin");

}
@if (GlobalUser.Role == Roles.Student)
{
    if(record==null)
    {
        if (studentRecordNull)
        {
            <NewStudentRecordDialog/>
        }
        else
        {
        <p><br />Fetching...</p>
        }
    }
    else
    {
        if(hasSubmittedThisYear)
        {
            <p>FeedBackView</p>
        }
        else
        {
            if (quizQuestions != null)
            {
            <MyTableHolder  HeaderColor="white" ColumnNames="colms">
                @foreach (var item in quizQuestions)
                {
                <MyTableItem>
                    <MyTableValue Color="white">@(item.id+1)</MyTableValue>
                    <MyTableValue Color="white">@item.question</MyTableValue>
                    <MyTableValue>
                        @if (item.TrueFalse)
                        {
                            <input type="checkbox" @bind-value="yournewAnswers[item.id]" />
                        }
                        else
                        {
                            <input type="number" max="10" @bind-value="yournewAnswers[item.id]" />
                        }
                    </MyTableValue>
                </MyTableItem>
                }
            </MyTableHolder>

            <button class="btn btn-primary">Save Changes</button>
            }
        }
    }
}

@code 
{   
    string[] colms = new string[] { "Question No", "Question", "Your Response" };

    StudentRecord record;
    string path = "StudentFeedbackQuestion/";
    string responsePath = "StudentFeedbackResponse/";
    bool studentRecordNull = false;
    bool hasSubmittedThisYear ;
    List<QuizQuestion> quizQuestions;
    Dictionary<string, int> yournewAnswers=new Dictionary<string, int>();

    protected override Task OnInitializedAsync()
    {
        FetchRecord();
        return base.OnInitializedAsync();
    }
    async void LoadQuestions()
    {
        quizQuestions = await DatabaseHelper.ReadData<List<QuizQuestion>>(Runtime, path);
        if(quizQuestions!=null)
        {
            foreach (var item in quizQuestions)
            {
                yournewAnswers.Add(item.id, 0);
            }
        }
        StateHasChanged();
    }
    //void SaveQuestions()
    //{
    //    var qq=new List<QuizQuestion>();
    //    for (int i = 0; i < 5; i++)
    //    {
    //        var q = new QuizQuestion();
    //        q.id = i.ToString();
    //        q.question = "Question" + i;
    //        qq.Add(q);
    //    }
    //    DatabaseHelper.WriteData(Runtime, path,qq);
    //    StateHasChanged();
    //}
    async void FetchRecord()
    {
        if (GlobalUser.Role == Roles.Student)
        {
            var path = "Records/" + GlobalUser.UID;
            record = await DatabaseHelper.ReadData<StudentRecord>(Runtime, path);
            if(record==null)
            {
                studentRecordNull = true;
            }
            else
            {
                hasSubmittedThisYear = await CheckYearFeedback();
            }
            StateHasChanged();
        }

    }

    async Task<bool> CheckYearFeedback()
    {
        var res = await DatabaseHelper.ReadData<StudentFeedbackResponse>(Runtime,responsePath+record.SchoolCode
            +"/"+record.Session+"/"+ record.RollNumber);

        if(res==null)
        {
            LoadQuestions();
            return false;
        }
        else
        {
            return true;
        }
    }

}