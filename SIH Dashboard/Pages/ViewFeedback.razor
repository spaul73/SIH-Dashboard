@page "/feedback/{Id}"
@inject IJSRuntime Runtime
<NavBar />
@if (feed != null)
{
<div class="container my-5 pt-5 pb-3 px-4 z-depth-1" id="main" >
    <div class="d-flex justify-content-between">
        <small class="black-text">Date: @feed.Date</small>
        <small class="black-text">School: <a href="school/@feed.SchoolCode">@schoolname</a></small>
        <small class="black-text">Submitted by: @username</small>
    </div>
    <br />
    <br />
    @for (int i = 0; i < scores.Count; i++)
    {
        <div class="d-flex justify-content-between">
            <small class="black-text">@questions[i]</small>
            <small class="black-text"><span><strong>@scores[i]</strong></span>/<span></span>10</small>
        </div>
        <div class="progress">
            <div class="progress-bar" role="progressbar" style="width: @(scores[i]*10)%" aria-valuenow="@scores[i]" aria-valuemin="0" aria-valuemax="10"></div>
        </div>
        <br>
    }
    <br />
    @if (feed.Notes != null)
    {
        <small class="black-text">Additional Notes: @feed.Notes</small>
    }
</div>
}
else
{
    <p class="black-text">Loading</p>
}

@code {
    [Parameter]
    public string Id { get; set; }

    private List<string> questions = null;
    private List<int> scores = new List<int>();
    private Feedbacks feed = null;
    private string username = null;
    private string schoolname = null;
    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            LoadVars();
        }
    }
    async void LoadVars()
    {
        questions = await DatabaseHelper.ReadList<List<string>>(Runtime, "Questions/");
        feed = await DatabaseHelper.ReadData<Feedbacks>(Runtime, "Feedbacks/" + Id);
        username = await DatabaseHelper.ReadData<string>(Runtime, "Users/" + feed.SubmitterId + "/name");
        schoolname = await DatabaseHelper.ReadData<string>(Runtime, "Schools/" + feed.SchoolCode + "/name");
        foreach(char c in feed.Feedback)
        {
            if (c != '0')
            {
                scores.Add((int)(c - '0'));
            }
            else
            {
                scores.Add(10);
            }
        }
        StateHasChanged();
    }
}

<style>
    body {
        
    }
    #main {
        background-color: #f5f8fd;
        border-radius: 20px;
    }
    .progress-bar{
        border-radius: 15px;
    }
</style>