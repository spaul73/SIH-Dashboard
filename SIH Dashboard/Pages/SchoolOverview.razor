@page "/schools/{SchoolCode}/overview/"
@inject IJSRuntime Runtime
@inject NavigationManager NavManager
<link rel="stylesheet" href="css/generalchart.css">
<link rel="stylesheet" href="css/chart-table.css">
<NavBar />

@if (feeds != null)
{
    <div id="wrapper">
        <div class="chart">
            <h2>School Overview</h2>
            <table id="data-table" border="1" cellpadding="10" cellspacing="0">
                <caption>Scores totaled from feedbacks</caption>
                <thead>
                    <tr>
                        <td>&nbsp;</td>
                        @foreach(string date in dates)
                        {
                            <th scope="col">@date</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <th scope="row">Category 1</th>
                        @foreach(int i in category1)
                        {
                            <td>@i</td>
                        }
                    </tr>
                    <tr>
                        <th scope="row">Category 2</th>
                        @foreach (int i in category2)
                        {
                            <td>@i</td>
                        }
                    </tr>
                    <tr>
                        <th scope="row">Category 3</th>
                        @foreach (int i in category1)
                        {
                            <td>@i</td>
                        }
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
}
else
{
    @if (chartnotmade)
    {
        <br />
        <p>Loading</p>
    }
    else
    {
        <br />
        <p>Failed to fetch profile data</p>
    }
}

@code
{
    [Parameter]
    public string SchoolCode { get; set; }
    private List<Feedbacks> feeds = null;
    private bool chartnotmade = true;
    private string[] dates = { "NA", "NA", "NA", "NA", "NA" };
    private int[] category1 = { 0, 0, 0, 0, 0 };
    private int[] category2 = { 0, 0, 0, 0, 0 };
    private int[] category3 = { 0, 0, 0, 0, 0 };
    protected async override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            LoadFeed();
        }
        else
        {
            if (chartnotmade)
            {
                await Runtime.InvokeVoidAsync("DisplayChart");
                chartnotmade = false;
            }
        }
    }
    async void LoadFeed()
    {
        feeds = await DatabaseHelper.GetFeedbacks<List<Feedbacks>>(Runtime, "school_feedbacks/" + SchoolCode, 5);
        for (int i = 0; i < feeds.Count; i++)
        {
            var feed = feeds[i];
            dates[i] = feed.Date;
            for (int j = 0; j < 10; j++)
            {
                int ch = (int)(feed.Feedback[j] - '0');
                if (ch == 0)
                    ch = 10;
                if (j < 4)
                    category1[i] += ch;
                else if (j < 7)
                    category2[i] += ch;
                else
                    category3[i] += ch;
            }
        }
        StateHasChanged();
    }
}