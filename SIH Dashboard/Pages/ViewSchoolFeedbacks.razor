@page "/school/{SchoolCode}/feedbacks"
@inject IJSRuntime Runtime
@inject NavigationManager NavManager
<NavBar />
<!-- Card Regular -->
<br />
<br />

@if (GlobalUser.UID == null)
{
    NavManager.NavigateTo("/signin");

}
@if (feeds != null)
{
    <DualCardHolder>
        <DualCard CardColor="mdb-color darken-3" TotalColumns="4">
            <br />
            <div class="white-text">
                <p class="white-text flex-center">School Name : @school.Name </p>
                <br />
                <p class="white-text flex-center">School Code : @SchoolCode</p>
                <br />
                <p class="white-text flex-center">Address : @school.Address</p>
                <br />
            </div>
        </DualCard>
        <DualCard CardColor="mdb-color darken-3" TotalColumns="8">
            <TableHolder ColumnNames="TableOption">
                @foreach (var feed in feeds)
                {
                    <TableItem>
                        <TableValue>@feed.Date</TableValue>
                        <TableValue>@usernames[feed.Id]</TableValue>
                        <TableValue><a href="/feedback/@feed.Id" style="color:white">View Feedback</a></TableValue>
                    </TableItem>
                }
            </TableHolder>
        </DualCard>
    </DualCardHolder>
}
else
{
    @if (firstrender)
    {
        <br />
        <p class="white-text">Loading</p>
    }
    else
    {
        <br />
        <p class="white-text">Failed to fetch profile data</p>
    }
}

@code
{
    [Parameter]
    public string SchoolCode { get; set; }

    private bool firstrender = true;
    private string[] TableOption = new string[] { "Date", "Submitted By", "Feedback" };
    private Schools school = null;
    private IDictionary<string, string> usernames = new Dictionary<string, string>();

    private List<Feedbacks> feeds = null;
    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            LoadFeed();
        }
        else
        {
            firstrender = false;
        }
    }
    async void LoadFeed()
    {
        feeds = await DatabaseHelper.GetFeedbacks<List<Feedbacks>>(Runtime, "school_feedbacks/" + SchoolCode);
        school = await DatabaseHelper.ReadData<Schools>(Runtime, "Schools/" + SchoolCode);
        foreach (var feed in feeds)
        {
            usernames.Add(feed.Id, await DatabaseHelper.ReadData<string>(Runtime, "Users/" + feed.SubmitterId + "/name"));
        }
        StateHasChanged();
    }
}

<style>
    body {
        background-image: url('./images/blur.jpg');
        background-repeat: no-repeat;
        background-size: 100% 100vh;
        background-position: 0% 0%;
    }
</style>