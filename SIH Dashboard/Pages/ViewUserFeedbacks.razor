@page "/user/feedbacks"
@inject IJSRuntime Runtime
@inject NavigationManager NavManager
<NavBar />
<!-- Card Regular -->
<br />
<br />

@if (GlobalUser.UID == null)
{
    NavManager.NavigateTo("/signin");

}
@if (feeds != null)
{
    <div class="container">
        <h5>@user.Name</h5>
        <h6>@user.Role.ToString()</h6>
        <address>@user.Email</address>
            <DataTable Searchable="true">
                <table class="table table-hover table-bordered table-responsive text-center" cellspacing="0">
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>School Code</th>
                            <th>School Name</th>
                            <th>Feedback</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var feed in feeds)
                        {
                            <tr>
                                <td>@feed.Date</td>
                                <td>@feed.SchoolCode</td>
                                <td>@schoolnames[feed.SchoolCode]</td>
                                <td><a href="/feedback/@feed.Id">View Feedback</a></td>
                            </tr>
                        }
                    </tbody>
                    <tfoot>
                        <tr>
                            <th>Date</th>
                            <th>School Name</th>
                            <th>School Code</th>
                            <th>Feedback</th>
                        </tr>
                    </tfoot>
                </table>
            </DataTable>
    </div>
}
else
{
    @if (firstrender)
    {
        <br />
        <p class="white-text">Loading</p>
    }
    else
    {
        <br />
        <p class="white-text">Failed to fetch profile data</p>
    }
}

@code
{
    private bool firstrender = true;
    private List<Feedbacks> feeds = null;
    private UserData user = null;
    private IDictionary<int, string> schoolnames = new Dictionary<int, string>();
    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            LoadFeed();
        }
        else
        {
            firstrender = false;
        }
    }
    async void LoadFeed()
    {
        feeds = await DatabaseHelper.GetFeedbacks<List<Feedbacks>>(Runtime, "user_feedbacks/" + GlobalUser.UID);
        user = await DatabaseHelper.ReadData<UserData>(Runtime, "Users/" + GlobalUser.UID);
        foreach (var feed in feeds)
        {
            schoolnames.Add(feed.SchoolCode, await DatabaseHelper.ReadData<string>(Runtime, "Schools/" + feed.SchoolCode + "/name"));
        }
        StateHasChanged();
    }
}