@page "/problems"
@inject IJSRuntime Runtime
@inject NavigationManager NavManager

<NavBar />
<style>
    #jumboimg{
        background: url(./img/pen1.svg);
        background-repeat: no-repeat;
        border-radius: 50%;
        width: 9rem;
        background-position: center;
        position: absolute;
        background-size: 86px;
        margin-left: 75rem;
        margin-top: 10rem;
        background-color: #f5faff;
    }
    #problemjumbo{
    
    background-color:#f5faff;
    color: #b8e3ef;
    box-shadow: 11px 10px 20px;
	width: 50%;
	margin-left: 27rem;
	margin-top: 7rem;
	padding: 7rem 0rem;
	border-radius: 20px;
    font-weight: 900;
	

    }
    .card-body{
	width: 50%;
	margin-left: 14rem;
	border-radius: 20px;
    }
    h1{
        margin-left: 16rem;
        font-size: 31px;
    }

    textarea{
        margin-left: 11rem;
        height: 13rem;
        width: 31rem;
        border-radius:8px;
       
    }
    #inputprob{
        margin-left: 11rem;
        width: 31rem;
        height: 4rem;
        margin-bottom: 11px;
        border-radius: 5px;
        text-align: center;
    }
</style>
@if (GlobalUser.UID == null)
    {
        NavManager.NavigateTo("/signin");

    }

@if (schoolCOde == null)
{   
<div class="jumbotron" id="problemjumbo">
    <h1 style="font-family: 'Nunito', sans-serif; color:#1bb1dc">Enter School Code</h1>
    <div class="card-body">
        <div class="flex-center">
            <input type="number" @bind-value="schoolCOde" placeholder="Enter School Code" />
            <button class="btn blue-gradient waves-effect" @onclick="()=> { StateHasChanged(); }">Enter</button>

        </div>
    </div>
</div>




}

else
{
    if (choice == -1)
    {
        <!-- #intro -->

        <main id="main">




            <!--==========================
              Services Section
            ============================-->
            <section id="services" class="section-bg">
                <div class="container">
                    <div class="row">

                        @*@if (GlobalUser.Role != Roles.Admin)
                            {*@
                        <div @onclick="@newSelect" class="col-md-6 col-lg-4 wow bounceInUp" data-wow-delay="0.1s" data-wow-duration="1.4s">
                            <div class="box">
                                <div class="icon" style="background: #e6fdfc;"><i class="ion-ios-paper-outline" style="color: #3fcdc7;"></i></div>
                                <h4 class="title">New Issue</h4>
                                <p class="description">Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur</p>
                            </div>
                        </div>
                        @*}*@
                        <div @onclick="viewSelect" class="col-md-6 col-lg-4 wow bounceInUp" data-wow-delay="0.1s" data-wow-duration="1.4s">
                            <div class="box">
                                <div class="icon" style="background: #e6fdfc;"><i class="ion-ios-paper-outline" style="color: #3fcdc7;"></i></div>
                                <h4 class="title">View Issues</h4>
                                <p class="description">Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur</p>
                            </div>
                        </div>

                    </div>

                </div>
            </section><!-- #services -->
        </main>



    }
   
    else if (choice == 0)
    {   <div class="jumbotron" id="jumboimg"></div>
        <div class="jumbotron" id="problemjumbo">
            <input id="inputprob" type="text" @bind-value="title" placeholder="Enter Topic" />
            <br />
            <textarea type="text" @bind="problemDesc">Description</textarea>
            <br />
            <button class="btn blue-gradient waves-effect" @onclick="CreateIssue" style="margin-left: 23rem;">Create</button>
         </div>
        if(error!=null)
        {
            <div class="alert-danger">@error</div>
        }
    }
    else
    {
        if (problemsList == null)
        {
            <p>Loading...</p>
        }
        else
        {
            <br />
            <MyTableHolder HeaderColor="white" ColumnNames="colms">
                @foreach (var problem in problemsList)
                {
                <MyTableItem>
                    <MyTableValue Color="white">@schoolCOde</MyTableValue>
                    <MyTableValue Color="white">@problem.Title</MyTableValue>
                    <MyTableValue Color="white">@problem.CreatedDate</MyTableValue>
                    <MyTableValue Color="white">
                        
                        <IssueViewer SchoolCode="@schoolCOde" Statement="problem" DataChanged="ReadAllSchoolIssues">
                        </IssueViewer>
                    </MyTableValue>
                </MyTableItem>
                }
            </MyTableHolder>
        }
        

    }
   

}


@code
{
    string[] colms = new string[] {"School Code","Problem","Created Date","View Status" };

    string uid;
    string problemDesc = "poor fcilities";
    string title = "bad school";
    string schoolCOde = null;
    Roles role;
    int choice = -1;
    List<SchoolProblem> problemsList;
    string error = null;
    async void CreateIssue()
    {
        var mod = await TextModerator.GetModerationResult(title+"\t"+problemDesc);
        if (!mod.Classification.ReviewRecommended)
        {
            SchoolProblem problemStatement = new SchoolProblem();
            problemStatement.Description = problemDesc;
            problemStatement.Title = title;
            problemStatement.CreatedDate = DateTime.Now;
            problemStatement.Uid = GlobalUser.UID;

            DatabaseHelper.PushData<SchoolProblem>(Runtime, "SchoolIssues/" + schoolCOde, problemStatement);
            choice = 1;
            ReadAllSchoolIssues();
        }
        else
        {
            error = "AI flagged your content obscene or , vulgar direct targetted please contact admin in case of any technical issue";
        }
        StateHasChanged();
    }
    void newSelect()
    {
        choice = 0;
        StateHasChanged();
    }
    void viewSelect()
    {
        choice = 1;
        ReadAllSchoolIssues();
        StateHasChanged();
    }

    async void ReadAllSchoolIssues()
    {
        if (schoolCOde == null)
            return;

        problemsList= await DatabaseHelper.ReadList<List<SchoolProblem>>(Runtime, "SchoolIssues/" + schoolCOde);
        problemsList=problemsList.OrderByDescending(x => x.CreatedDate).ToList();
        StateHasChanged();
    }
    protected override void OnInitialized()
    {
        base.OnInitialized();
        ReadAllSchoolIssues();
    }
    bool Valid()
    {
        return false;
    }
}
